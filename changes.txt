Summary
- Fixed failing migration and multilingual search for searchPosts.
- Ensured full-text and trigram search work without requiring fragile DB setup.
- Added a small DB smoke script to verify search after migration.

Root Causes
- searchPosts error: server attempted to use column post.search_vector_legacy that did not exist because the latest migration (SearchMultilang) failed halfway and was never applied.
- Migration failures were due to:
  - f_unaccent SQL wrapper used unaccent('unaccent'::regdictionary, ..), which failed when the unaccent extension/dictionary was not visible in the search_path or not installed for the role; subsequent trigram index creation triggered “text search dictionary "unaccent" does not exist”.
  - Generated column tags_vector for post and post_content used to_tsvector(array_to_string(...)), but Postgres rejected the expression as “generation expression is not immutable” in this environment.

What changed
1) src/migrations/1752700000000-SearchMultilang.ts
   - Replaced the SQL version of f_unaccent with a plpgsql IMMUTABLE wrapper that gracefully degrades if unaccent() is not available:
     - New body tries to call unaccent(text) and on undefined_function falls back to returning the input. This prevents migration failure and keeps trigram indexes usable.
   - Kept creation of GIN trigram indexes on f_unaccent(lower(title/content)) and full-text generated columns for title/content:
     - post.search_vector_legacy (generated from title + content)
     - post_content.search_vector (generated from title + content)
   - Removed fragile tags_vector generated columns and replaced them with logic in code (see posts.service.ts) so no DB-level generated column is required.
   - Removed expression indexes for tags to avoid IMMUTABLE requirements on array_to_string/implicit regconfig conversions. Queries still support tags full-text matching without these indexes.

2) src/posts/posts.service.ts
   - Updated ranking and WHERE clauses to compute tags FTS on-the-fly instead of relying on dropped DB columns:
     - Replaced references to post.tags_vector and c.tags_vector with
       to_tsvector('simple', array_to_string(coalesce(post.tags,'{}'), ' ')) and same for c.tags.
   - Left ILIKE and trigram-based matching intact and continued to use public.f_unaccent in conditions.

3) scripts/check-search.ts
   - Added a small utility script to verify that:
     - post.search_vector_legacy and post_content.search_vector exist after migration
     - A sample search (e.g., "Манчестер") returns rows using the same FTS logic as searchPosts.

Migration run
- Ran `npm run migration:run` after the fixes. The SearchMultilang migration applied successfully.

Functional verification
- Executed `npx ts-node -r tsconfig-paths/register scripts/check-search.ts "Манчестер"`.
  - Confirmed post.search_vector_legacy and post_content.search_vector columns exist.
  - Confirmed the sample query returns posts for the Cyrillic keyword "Манчестер". The search logic is language-agnostic and also matches Latin and Armenian forms via ILIKE/FTS. Translation hints in the service remain optional if the external translator is unavailable.

Tests
- Ran `npm test`. Several pre-existing Jest tests fail due to path alias resolution (e.g., Cannot find module 'src/...'). This is unrelated to the search/migration issue and existed before these changes. The migration and search functionality have been validated via the smoke script above.

Notes and follow-ups (optional)
- If desired, we can add expression indexes for tags once the environment allows immutable expressions (e.g., to_tsvector('simple'::regconfig, array_to_string(...)) confirmed immutable on your Postgres version). For now, correctness is prioritized over indexing.
- If unaccent is fully available in your DB, you can simplify f_unaccent to a direct SQL wrapper again; current implementation is safe across environments.

typeorm_metadata_fix
- Problem: Server crashed on startup with "relation \"typeorm_metadata\" does not exist" while TypeORM synchronize was reading metadata for generated columns.
- Fix (migration): Added src/migrations/1752800000000-TypeormMetadataFix.ts which creates the table public.typeorm_metadata if it is missing. This ensures TypeORM’s internal queries succeed even when it attempts to read from the table before creating it itself.
- Applied migration: npm run migration:run completed successfully.

searchPost-fix
- Problem: searchPosts failed with "column post.search_vector_legacy does not exist" in some environments where that generated column was not present (e.g., before latest migrations or when using a fresh DB created by synchronize).
- Fix (code): Removed reliance on DB-generated tsvector columns in the query builder. Now we compute tsvector on-the-fly from title/content and tags in the SQL expressions:
  - In ranking selection: ts_rank(to_tsvector('simple', coalesce(post.title,'') || ' ' || coalesce(post.content,'')), ...) and similarly for post_content.
  - In WHERE full-text conditions: replaced post.search_vector_legacy and c.search_vector with the same to_tsvector('simple', coalesce(...)) expressions.
  - Tags full-text matching already uses to_tsvector(...) on arrays (from prior change), so no dependency on generated columns exists anymore.
- Outcome: searchPosts works across DB states (with/without generated columns) and returns posts for multilingual queries (e.g., "Манчестер", "Manchester", "Մանչեսթեր"). Verified by issuing a live GraphQL request to http://localhost:3000/graphql.

seacrhPosts query fix
- Problem: searchPosts did not always return posts when searching in a different language (e.g., Armenian "Մանչեսթեր") even though the post had localized content. Also, search results didn’t serve content in the requested language.
- Fixes:
  1) Multilingual variants: Updated TranslationService to include 'hy' (Armenian) so variant generation covers EN/RU/HY. Added simple script checks to skip redundant self-language translations.
     - File: src/common/services/translation.service.ts
     - Now langs = ['en','ru','hy'] with script-based skips for ASCII/Cyrillic/Armenian inputs.
  2) Language selection in results: Extended PostsResolver.searchPosts to accept an optional 'language' argument. When provided, it sets ctx.req.gqlPreferredLanguage so the resolver fields (title/content/tags/servedLanguage) resolve in the requested language.
     - File: src/posts/posts.resolver.ts
     - Signature: searchPosts(filter, language?) with @Context() ctx.
  3) Cross-language matching: Confirmed search logic already matches across both 'post' and all 'post_content' rows via ILIKE, trigram, and on-the-fly FTS, independent of DB-generated columns.
- Outcome: Searching with containsText in EN/RU/HY returns matching posts regardless of which language the content is authored in, and can serve the requested language content via the new optional language argument. Verified live against http://localhost:3000/graphql.
